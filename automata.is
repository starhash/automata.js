typespace Automata {
    var _spawnedAutomata = [];

    define spawn(_automata) {
        $this._spawnedAutomata.push(_automata);
    }

    define spawned() {
        return $this._spawnedAutomata;
    }

    type Automaton {
        with () {
            $this.running = false;
            $this._count = 0;
            $this._life = 0;
            Automata.spawn($this);
        }
        with (_run, _delta, _stop, _life) {
            $this.running = false;
            $this._run = _run;
            $this._delta = _delta;
            $this._stop = _stop;
            $this._count = 0;
            $this._life = _life;
        }

        define stop() {
            if ($this.running) {
                $this.running = false;
                $this._count = 0;
                $this._end = Date.now();
                $this._stop();
            }
        }

        define run() {
            if ($this.running && ($this._life > $this._count)) {
                $this._run();
                $this._count += 1;
                setTimeout(define () {
                    $this.run();
                }, $this._delta);
            } else {
                $this.stop();
            }
        }

        define start() {
            if ($this.running == false) {
                $this._begin = Date.now();
                $this.running = true;
                $this.run();
            }
        }
    }

    enum CellState {
        Unborn,
        Living,
        Dead
    }

    enum CellType {
        None,
        EnergyProducer,
        EnergyConsumer,
        ReproductiveConsumer
    }
    
    type Cell : /Automata/Automaton {
        var connections = {};
        var connectionStateActions = {};
        var state = /Automata/CellState.Living;

        with () {
            $this.connections.in = [];
            $this.connections.inLimit = 0;
            $this.connections.out = [];
            $this.connections.outLimit = 0;
            $this._delta = 1000;
            $this._begin = -1;
            $this._end = 0;
            $this._type = Automata.CellType.None;
        }

        with (_life) {
            $this.connections.in = [];
            $this.connections.inLimit = 0;
            $this.connections.out = [];
            $this.connections.outLimit = 0;
            $this._delta = 1000;
            $this._life = _life;
            $this._begin = -1;
            $this._end = 0;
        }

        define getBegin() {
            if ($this._begin !== -1) {
                return $this._begin;
            }
            return 0;
        }

        define getEnd() {
            if ($this._end !== 0) {
                return $this._end;
            }
            return Date.now();
        }

        define addOutConnection(cell) {
            if ($this.connections.out.length < $this.connections.outLimit) {
                $this.connections.out.push(cell);
                if ($this._addOutConnection !== undefined) {
                    $this._addOutConnection(cell);
                }
            }
        }

        define addInConnection(cell) {
            if ($this.connections.in.length < $this.connections.inLimit) {
                $this.connections.in.push(cell);
                if ($this._addInConnection !== undefined) {
                    $this._addInConnection(cell);
                }
            }
        }

        define _run() {
            Console.log("OK " + $this._count);
        }

        define _stop() {
            Console.log("STOPPED");
        }
    }
}